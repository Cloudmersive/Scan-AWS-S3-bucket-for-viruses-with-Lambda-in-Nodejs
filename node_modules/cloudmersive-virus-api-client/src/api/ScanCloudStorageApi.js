/**
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CloudStorageVirusScanResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CloudStorageVirusScanResult'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveVirusApiClient) {
      root.CloudmersiveVirusApiClient = {};
    }
    root.CloudmersiveVirusApiClient.ScanCloudStorageApi = factory(root.CloudmersiveVirusApiClient.ApiClient, root.CloudmersiveVirusApiClient.CloudStorageVirusScanResult);
  }
}(this, function(ApiClient, CloudStorageVirusScanResult) {
  'use strict';

  /**
   * ScanCloudStorage service.
   * @module api/ScanCloudStorageApi
   * @version 1.2.0
   */

  /**
   * Constructs a new ScanCloudStorageApi. 
   * @alias module:api/ScanCloudStorageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the scanCloudStorageScanAwsS3File operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanAwsS3FileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan an AWS S3 file for viruses
     * Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} accessKey AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console
     * @param {String} secretKey AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console
     * @param {String} bucketRegion Name of the region of the S3 bucket, such as &#39;US-East-1&#39;
     * @param {String} bucketName Name of the S3 bucket
     * @param {String} keyName Key name (also called file name) of the file in S3 that you wish to scan for viruses
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanAwsS3FileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageVirusScanResult}
     */
    this.scanCloudStorageScanAwsS3File = function(accessKey, secretKey, bucketRegion, bucketName, keyName, callback) {
      var postBody = null;

      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'secretKey' is set
      if (secretKey === undefined || secretKey === null) {
        throw new Error("Missing the required parameter 'secretKey' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'bucketRegion' is set
      if (bucketRegion === undefined || bucketRegion === null) {
        throw new Error("Missing the required parameter 'bucketRegion' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'bucketName' is set
      if (bucketName === undefined || bucketName === null) {
        throw new Error("Missing the required parameter 'bucketName' when calling scanCloudStorageScanAwsS3File");
      }

      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling scanCloudStorageScanAwsS3File");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accessKey': accessKey,
        'secretKey': secretKey,
        'bucketRegion': bucketRegion,
        'bucketName': bucketName,
        'keyName': keyName
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/aws-s3/single', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanAzureBlob operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanAzureBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan an Azure Blob for viruses
     * Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} connectionString Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.
     * @param {String} containerName Name of the Blob container within the Azure Blob Storage account
     * @param {String} blobPath Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanAzureBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageVirusScanResult}
     */
    this.scanCloudStorageScanAzureBlob = function(connectionString, containerName, blobPath, callback) {
      var postBody = null;

      // verify the required parameter 'connectionString' is set
      if (connectionString === undefined || connectionString === null) {
        throw new Error("Missing the required parameter 'connectionString' when calling scanCloudStorageScanAzureBlob");
      }

      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling scanCloudStorageScanAzureBlob");
      }

      // verify the required parameter 'blobPath' is set
      if (blobPath === undefined || blobPath === null) {
        throw new Error("Missing the required parameter 'blobPath' when calling scanCloudStorageScanAzureBlob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'connectionString': connectionString,
        'containerName': containerName,
        'blobPath': blobPath
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/azure-blob/single', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCloudStorageScanGcpStorageFile operation.
     * @callback module:api/ScanCloudStorageApi~scanCloudStorageScanGcpStorageFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudStorageVirusScanResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     * Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
     * @param {String} bucketName Name of the bucket in Google Cloud Storage
     * @param {String} objectName Name of the object or file in Google Cloud Storage
     * @param {File} jsonCredentialFile Service Account credential for Google Cloud stored in a JSON file.
     * @param {module:api/ScanCloudStorageApi~scanCloudStorageScanGcpStorageFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudStorageVirusScanResult}
     */
    this.scanCloudStorageScanGcpStorageFile = function(bucketName, objectName, jsonCredentialFile, callback) {
      var postBody = null;

      // verify the required parameter 'bucketName' is set
      if (bucketName === undefined || bucketName === null) {
        throw new Error("Missing the required parameter 'bucketName' when calling scanCloudStorageScanGcpStorageFile");
      }

      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling scanCloudStorageScanGcpStorageFile");
      }

      // verify the required parameter 'jsonCredentialFile' is set
      if (jsonCredentialFile === undefined || jsonCredentialFile === null) {
        throw new Error("Missing the required parameter 'jsonCredentialFile' when calling scanCloudStorageScanGcpStorageFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'bucketName': bucketName,
        'objectName': objectName
      };
      var formParams = {
        'jsonCredentialFile': jsonCredentialFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CloudStorageVirusScanResult;

      return this.apiClient.callApi(
        '/virus/scan/cloud-storage/gcp-storage/single', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
